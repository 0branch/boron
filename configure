#!/bin/bash

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
  echo "Configuration Options:"
  echo "  -h, --help      Display this help and exit"
  echo "  --cleanA        Remove boronA and build files"
  echo -e "\nRemove Standard Features:"
  echo "  --no-checksum   Remove the checksum function"
  echo "  --no-compress   Remove the compress function"
  echo "  --no-execute    Remove the execute function"
  echo "  --no-random     Remove the random function"
  echo "  --no-readline   Remove console editing and history"
  echo "  --no-socket     Remove the socket port"
  echo -e "\nAdd Optional Features:"
  echo "  --assemble      Enable assemble function (requires libjit)"
  echo "  --bzip2         Use bzip2 for compress instead of zlib"
  echo "  --gnu-readline  Use GNU Readline for console editing and history"
  echo "  --timecode      Enable timecode! datatype"
  echo "  --thread        Enable thread functions"
  exit
fi


CLEAN_A=0
CFG_ASSEM=0
CFG_CHECKSUM=1
CFG_COMPRESS=zlib
CFG_EXECUTE=1
CFG_RANDOM=1
CFG_READLINE=linenoise
CFG_SOCKET=1
CFG_TIMECODE=0
CFG_THREAD=0

for opt in "$@"; do
  case $opt in
    --cleanA)
      CLEAN_A=1 ;;
    --no-checksum)
      CFG_CHECKSUM=0 ;;
    --no-compress)
      CFG_COMPRESS=0 ;;
    --no-execute)
      CFG_EXECUTE=0 ;;
    --no-random)
      CFG_RANDOM=0 ;;
    --no-readline)
      CFG_READLINE=0 ;;
    --no-socket)
      CFG_SOCKET=0 ;;
    --assemble)
      CFG_ASSEM=1 ;;
    --bzip2)
      CFG_COMPRESS=bzip2 ;;
    --gnu-readline)
      CFG_READLINE=gnu ;;
    --timecode)
      CFG_TIMECODE=1 ;;
    --thread)
      CFG_THREAD=1 ;;
    *)
      echo "Invalid option $opt"
      exit 1
      ;;
  esac
done


if command -v gcc >/dev/null; then
  rm -f MakefileA configure.log

  function emit {
    echo -e $1 >> MakefileA
  }

  emit "\nCFLAGS=-Iinclude -Iurlan -Ieval -Isupport -std=gnu99 -pedantic -Wall -W -O3"
  emit "LIBS=-lm"
  emit "OBJS=env.o array.o binary.o block.o coord.o date.o path.o \\"
  emit "	string.o context.o gc.o serialize.o tokenize.o bignum.o \\"
  emit "	vector.o parse_binary.o parse_block.o parse_string.o \\"
  emit "	support/str.o support/mem_util.o support/quickSortIndex.o \\"
  emit "	unix/os.o eval/boron.o eval/console.o eval/port_file.o eval/wait.o"
  emit "\nboronA: \$(OBJS)\n\tgcc \$^ -o \$@ \$(LIBS)"
  emit "\n%.o: %.c\n\tgcc -c \$(CFLAGS) \$< -o \$@"
  emit "\n%.o: urlan/%.c\n\tgcc -c \$(CFLAGS) \$< -o \$@"
  emit "\n.PHONY: clean\nclean:\n\trm -f boronA \$(OBJS)"

  if which gmake >/dev/null 2>&1 ; then
    MAKE=gmake
  else
    MAKE=make
  fi
  
  if [ $CLEAN_A = 1 ]; then
    $MAKE -f MakefileA clean
    rm -f MakefileA
    exit 0
  fi

  echo "Generating boronA binary to run m2"
  if ! $MAKE -f MakefileA >> configure.log 2>&1 ; then
    cat configure.log
    exit 1
  fi
else
  echo "No compiler found; no Makefile generated."
  exit 1
fi


echo "Generating project.config"
rm -f project.config

function m2-word {
if [ $2 = 0 ]; then
  echo "$1: false" >> project.config
else
  echo "$1: '$2" >> project.config
fi
}
function m2-logic {
if [ $2 = 0 ]; then
  echo "$1: false" >> project.config
else
  echo "$1: true" >> project.config
fi
}

m2-logic "assemble" $CFG_ASSEM
m2-logic "checksum" $CFG_CHECKSUM
m2-word  "compress" $CFG_COMPRESS
m2-logic "execute"  $CFG_EXECUTE
m2-logic "random"   $CFG_RANDOM
m2-word  "readline" $CFG_READLINE
m2-logic "socket"   $CFG_SOCKET
m2-logic "timecode" $CFG_TIMECODE
m2-logic "thread"   $CFG_THREAD


echo "Building GNU Makefile with m2"
case `uname -s` in
  Darwin)
    M2T=m2_macx.b ;;
  SunOS)
    M2T=m2_sun.b ;;
  *)
    M2T=m2_linux.b ;;
esac
./boronA -s scripts/m2/m2 -t scripts/m2/$M2T
